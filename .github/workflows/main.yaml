name: build-and-upload accounts ms
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build_and_test:
    name: build the jar file and upload to s3
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Generate version
        id: set-version
        run: echo "version=1.0.${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT
      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build project with Maven
        run: mvn clean package -Drevision=${{ steps.set-version.outputs.version }}

      - name: Rename  jar file
        run: mv target/accounts-*.jar target/accounts-${{ steps.set-version.outputs.version }}.jar

      - name: setup Sonarscanner
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarQube Scan
        run: sonar-scanner
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.sources=src/
          -Dsonar.junit.reportPaths=target/surefire-reports/
          -Dsonar.jaccoco.reportPaths=target/jacoco.exec
          -Dsonar.java.binaries=target/classes/com/eazybytes/accounts

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
           name: accounts-jar
           path: target/accounts-${{ steps.set-version.outputs.version }}.jar

  publish-job-to-s3:
    runs-on: ubuntu-latest
    needs: [ build_and_test ]
    steps:
      -  name: Download artifact
         uses: actions/download-artifact@v2
         with:
           name: accounts-jar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Replace with your desired region

      - name: Deploy to S3
        run: |
          aws s3 cp accounts-${{ needs.build_and_test.outputs.version }}.jar s3://rak-vprofile-bucket/jars/
      
  publish-job-to-ecr:
    runs-on: ubuntu-latest
    needs: [ build_and_test ]
    steps:
      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY}}
          repo: vprofile-ecr-rakesh
          region: us-east-1
          tags: latest, ${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./